// R√©cup√®re le token de l'URL et le stocke dans le localStorage si pr√©sent
const urlParams = new URLSearchParams(window.location.search);
const token = urlParams.get('token');
if (token) {
    localStorage.setItem('token', token);
    // Retire le token de l'URL
    window.history.replaceState({}, document.title, "/");
}

// V√©rifie si l'utilisateur est authentifi√©
const storedToken = localStorage.getItem('token');
if (!storedToken) {
    window.location.href = '/login';
} 

// Initialisation de la connexion Socket.IO avec le token
const socket = io({ query: { token: storedToken } });

// Gestion des erreurs de connexion
socket.on('connect_error', (err) => {
    console.error('Erreur de connexion Socket.IO:', err.message);
    alert('Erreur d\'authentification. Veuillez vous reconnecter.');
    localStorage.removeItem('token');
    window.location.href = '/login';
});

// Fonction pour formater la date en style "messagerie populaire"
function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();

    if (date.toDateString() === now.toDateString()) {
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    const yesterday = new Date(now);
    yesterday.setDate(now.getDate() - 1);
    if (date.toDateString() === yesterday.toDateString()) {
        return `Hier, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
    
    const weekAgo = new Date(now);
    weekAgo.setDate(now.getDate() - 7);
    if (date > weekAgo) {
        return `${date.toLocaleDateString('fr-FR', { weekday: 'long' })}, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
    
    return date.toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' }) + ', ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// Fonction pour envoyer un message priv√©
function sendMessage() {
    const toEmail = document.getElementById('toEmail').value.trim();
    const message = document.getElementById('message').value.trim();

    if (toEmail && message) {
        socket.emit('private_message', { to: toEmail, message });
        
        const messageElement = document.createElement("li");
        messageElement.classList.add("sent-message");
        const timestamp = new Date().toISOString();
        messageElement.innerHTML = `<strong>Vous:</strong> ${message} <span class="message-date">${formatDate(timestamp)}</span>`;
        document.getElementById('messages').appendChild(messageElement);

        messageElement.style.animation = "fadeIn 0.3s ease-in-out";
        document.getElementById('message').value = '';
    } else {
        alert("Veuillez entrer un message valide et un destinataire.");
    }
}

// R√©ception des messages priv√©s de la part du serveur
socket.on('receive_message', ({ from, message, timestamp }) => {
    const messageElement = document.createElement("li");
    messageElement.classList.add("received-message");
    messageElement.innerHTML = `<strong>${from}:</strong> ${message} <span class="message-date">${formatDate(timestamp)}</span>`;
    document.getElementById('messages').appendChild(messageElement);

    messageElement.style.animation = "fadeIn 0.3s ease-in-out";
});

// Fonction de d√©connexion
document.getElementById('signOutButton').addEventListener('click', function() {
    localStorage.removeItem('token');
    document.cookie.split(";").forEach(function(cookie) {
        const name = cookie.split("=")[0].trim();
        document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/";
    });
    window.location.href = '/login';
});
// D√©finir les √©mojis par cat√©gorie
const emojiCategories = {
    smileys: ['üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'üòó', 'üòô', 'üòö'],
    animals: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶'],
    food: ['üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'ü•ù', 'üçí', 'üçç', 'ü•≠', 'üçë', 'ü•ë', 'üçÜ', 'üåΩ'],
    activities: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', 'üèê', 'üèâ', 'üé±', 'üèì', 'üè∏', 'ü•ã', '‚õ∏Ô∏è', 'üé£', 'ü§ø', 'üéΩ', 'üéø', 'üèÇ', 'üö¥'],
    objects: ['üì±', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üïπÔ∏è', 'üí°', 'üî¶', 'üì∑', 'üé•', 'üìû', 'üìü', 'üì†', 'üì∫', 'üìª', '‚è∞', '‚è≥', 'üì°'],
    symbols: ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù'],
    nature: ['üå≥', 'üå≤', 'üåµ', 'üå∑', 'üåº', 'üåª', 'üåπ', 'üå∏', 'üå∫', 'üçÅ', 'üçÇ', 'üçÉ', 'üåà', 'üå§Ô∏è', '‚õÖ', 'üå¶Ô∏è', 'üåßÔ∏è', '‚ùÑÔ∏è'],
    vehicles: ['üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê', 'üöö', 'üöõ', 'üöú', 'üõ¥', 'üö≤', 'üõµ', 'üèçÔ∏è', '‚úàÔ∏è'],
    flags: ['üá´üá∑', 'üá∫üá∏', 'üá®üá¶', 'üá©üá™', 'üáÆüáπ', 'üá™üá∏', 'üáØüáµ', 'üá∞üá∑', 'üá®üá≥', 'üá¨üáß', 'üáÆüá≥', 'üáßüá∑', 'üá≤üáΩ', 'üá∑üá∫', 'üá¶üá∫', 'üáøüá¶', 'üá≥üá¨', 'üá¶üá™'],
    misc: ['üéâ', 'üéä', 'üéà', 'üíå', 'üì©', 'üì®', 'üìß', 'üì™', 'üì´', 'üì¨', 'üì≠', 'üìÆ', 'üîñ', 'üè∑Ô∏è', 'üéÅ', 'üéÄ', 'üéóÔ∏è', 'üîó']
};

// Fonction pour initialiser le s√©lecteur d'√©mojis
function initializeEmojiPicker() {
    const emojiContent = document.getElementById('emojiContent');
    const emojiTabs = document.querySelectorAll('.emoji-tab');

    // Affiche les √©mojis de la premi√®re cat√©gorie par d√©faut
    displayEmojis('smileys');

    // Gestion des clics sur les onglets
    emojiTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const category = tab.getAttribute('data-category');
            displayEmojis(category);
        });
    });

    // Fonction pour afficher les √©mojis d'une cat√©gorie
    function displayEmojis(category) {
        emojiContent.innerHTML = ''; // R√©initialise le contenu
        emojiCategories[category].forEach(emoji => {
            const emojiButton = document.createElement('button');
            emojiButton.classList.add('emoji-btn');
            emojiButton.textContent = emoji;
            emojiButton.addEventListener('click', () => {
                insertEmoji(emoji);
            });
            emojiContent.appendChild(emojiButton);
        });
    }

    // Fonction pour ins√©rer un √©moji dans la zone de texte
    function insertEmoji(emoji) {
        const messageInput = document.getElementById('messageInput');
        messageInput.value += emoji;
        messageInput.focus();
    }
}

// Initialisation du s√©lecteur d'√©mojis apr√®s chargement de la page
document.addEventListener('DOMContentLoaded', () => {
    initializeEmojiPicker();
});
