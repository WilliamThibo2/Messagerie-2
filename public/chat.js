// R√©cup√®re le token de l'URL et le stocke dans le localStorage si pr√©sent
const urlParams = new URLSearchParams(window.location.search);
const token = urlParams.get('token');
if (token) {
    localStorage.setItem('token', token);
    // Retire le token de l'URL
    window.history.replaceState({}, document.title, "/");
}

// V√©rifie si l'utilisateur est authentifi√©
const storedToken = localStorage.getItem('token');
if (!storedToken) {
    window.location.href = '/login';
} 

// Initialisation de la connexion Socket.IO avec le token
const socket = io({ query: { token: storedToken } });

// Gestion des erreurs de connexion
socket.on('connect_error', (err) => {
    console.error('Erreur de connexion Socket.IO:', err.message);
    alert('Erreur d\'authentification. Veuillez vous reconnecter.');
    localStorage.removeItem('token');
    window.location.href = '/login';
});

// Fonction pour formater la date en style "messagerie populaire"
function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();

    if (date.toDateString() === now.toDateString()) {
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    const yesterday = new Date(now);
    yesterday.setDate(now.getDate() - 1);
    if (date.toDateString() === yesterday.toDateString()) {
        return `Hier, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
    
    const weekAgo = new Date(now);
    weekAgo.setDate(now.getDate() - 7);
    if (date > weekAgo) {
        return `${date.toLocaleDateString('fr-FR', { weekday: 'long' })}, ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
    
    return date.toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' }) + ', ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// Fonction pour envoyer un message priv√©
function sendMessage() {
    const toEmail = document.getElementById('toEmail').value.trim();
    const message = document.getElementById('message').value.trim();

    if (toEmail && message) {
        socket.emit('private_message', { to: toEmail, message });

        const messageElement = document.createElement("li");
        messageElement.classList.add("sent-message");

        // Transforme les liens en cliquables
        const clickableMessage = makeLinksClickable(message);

        const timestamp = new Date().toISOString();
        messageElement.innerHTML = `<strong>Vous:</strong> ${clickableMessage} <span class="message-date">${formatDate(timestamp)}</span>`;
        document.getElementById('messages').appendChild(messageElement);

        messageElement.style.animation = "fadeIn 0.3s ease-in-out";
        document.getElementById('message').value = '';
    } else {
        alert("Veuillez entrer un message valide et un destinataire.");
    }
}


// R√©ception des messages priv√©s de la part du serveur
socket.on('receive_message', ({ from, message, timestamp }) => {
    const messageElement = document.createElement("li");
    messageElement.classList.add("received-message");

    // Sanitize and make links clickable
    const safeMessage = sanitizeHTML(message);
    const clickableMessage = makeLinksClickable(safeMessage);

    messageElement.innerHTML = `<strong>${from}:</strong> ${clickableMessage} <span class="message-date">${formatDate(timestamp)}</span>`;
    document.getElementById('messages').appendChild(messageElement);

    messageElement.style.animation = "fadeIn 0.3s ease-in-out";
});

// Fonction de d√©connexion
document.getElementById('signOutButton').addEventListener('click', function() {
    localStorage.removeItem('token');
    document.cookie.split(";").forEach(function(cookie) {
        const name = cookie.split("=")[0].trim();
        document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/";
    });
    window.location.href = '/login';
});
// Liste compl√®te des √©mojis par cat√©gorie
const emojiCategories = {
    smileys: ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòç', 'ü•∞', 'üòò', 'üòã', 'üòé', 'üòú', 'ü§©', 'üò°', 'üò≠', 'üò±', 'üò¥'],
    animals: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'ü¶Å', 'üêØ', 'üê¶', 'üê§', 'ü¶ú', 'üêç', 'üê†', 'üêô', 'ü¶à'],
    food: ['üçé', 'üçä', 'üçá', 'üçâ', 'üçì', 'üçå', 'üçç', 'ü•≠', 'üçë', 'üçí', 'ü•ù', 'üçÖ', 'ü•ë', 'ü•ï', 'ü•î', 'üç†', 'ü•í', 'ü•¨', 'üåΩ', 'üçû', 'ü•ê', 'ü•ñ', 'ü•Ø', 'ü•û', 'üßÄ', 'üçó', 'üçñ', 'ü•©', 'üç§', 'üç£', 'üçï', 'üçî', 'üçü', 'üå≠', 'ü•™', 'üåÆ', 'üåØ', 'ü•ó', 'üçø', 'ü•§', 'üç©', 'üç™', 'üéÇ', 'üç∞'],
    activities: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', 'üèê', 'üé±', 'üèì', 'üè∏', 'ü•ä', 'ü•ã', 'üõπ', '‚õ∏Ô∏è', 'üé£', 'üéΩ', 'üéø', 'üèÇ', 'üèåÔ∏è‚Äç‚ôÇÔ∏è', 'üèÑ‚Äç‚ôÇÔ∏è', 'üèä‚Äç‚ôÇÔ∏è', 'ü§Ω‚Äç‚ôÇÔ∏è', 'üö¥‚Äç‚ôÇÔ∏è', 'üöµ‚Äç‚ôÇÔ∏è'],
    objects: ['üì±', 'üíª', 'üñ•Ô∏è', 'üñ®Ô∏è', '‚å®Ô∏è', 'üñ±Ô∏è', 'üíø', 'üì∑', 'üì∏', 'üìπ', 'üé•', 'üì∫', 'üìª', '‚è∞', 'üîã', 'üîå', 'üí°', 'üî¶', 'üïØÔ∏è', 'üßØ', 'üî®', 'ü™ì', 'üîß', 'ü™õ', 'üß∞', 'üî©', 'ü™ô', 'üí∏', 'üí≥', 'üì¶', 'üì¨'],
    symbols: ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', 'üî¥', 'üü†', 'üü°', 'üü¢', 'üîµ', 'üü£', 'üü§', '‚ö™', '‚ö´', 'üî∂', 'üî∑', 'üî∫', 'üîª', 'üè≥Ô∏è', 'üè¥', 'üèÅ', 'üö©']
};

// R√©f√©rence des √©l√©ments HTML
const emojiTabs = document.querySelectorAll('.emoji-tab');
const emojiContent = document.getElementById('emojiContent');
const emojiSearch = document.getElementById('emojiSearch');

// Fonction pour charger les √©mojis d'une cat√©gorie
function loadEmojis(category) {
    emojiContent.innerHTML = ''; // R√©initialiser le contenu
    emojiCategories[category].forEach(emoji => {
        createEmojiButton(emoji);
    });
}

// Fonction pour cr√©er un bouton d'√©moji
function createEmojiButton(emoji) {
    const emojiButton = document.createElement('button');
    emojiButton.innerText = emoji;
    emojiButton.onclick = () => {
        document.getElementById('message').value += emoji;
        document.getElementById('emojiPicker').style.display = 'none';
    };
    emojiContent.appendChild(emojiButton);
}

// Filtrer les √©mojis en fonction de la recherche
emojiSearch.addEventListener('input', () => {
    const query = emojiSearch.value.toLowerCase();
    emojiContent.innerHTML = ''; // R√©initialiser le contenu
    for (const category in emojiCategories) {
        emojiCategories[category]
            .filter(emoji => emoji.includes(query))
            .forEach(createEmojiButton);
    }
});

// Ajoutez des √©v√©nements aux onglets
emojiTabs.forEach(tab => {
    tab.addEventListener('click', () => {
        emojiTabs.forEach(t => t.classList.remove('active')); // Retirer les styles actifs
        tab.classList.add('active'); // Ajouter le style actif
        emojiSearch.value = ''; // R√©initialiser la barre de recherche
        loadEmojis(tab.dataset.category); // Charger les √©mojis
    });
});

// Afficher la premi√®re cat√©gorie par d√©faut
document.addEventListener('DOMContentLoaded', () => {
    emojiTabs[0].classList.add('active');
    loadEmojis(emojiTabs[0].dataset.category);
});

// Bouton pour afficher/masquer le s√©lecteur
document.getElementById('emojiButton').addEventListener('click', () => {
    const emojiPicker = document.getElementById('emojiPicker');
    emojiPicker.style.display = emojiPicker.style.display === 'block' ? 'none' : 'block';
});

// S√©lecteur du bouton
const darkModeToggle = document.getElementById('themeToggle');

// V√©rifie l'√©tat initial du mode sombre
const isDarkMode = localStorage.getItem('darkMode') === 'true';
if (isDarkMode) {
    document.body.classList.add('dark-mode');
}

// Bascule entre le mode sombre et clair
darkModeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-mode');
    const isDarkModeActive = document.body.classList.contains('dark-mode');
    localStorage.setItem('darkMode', isDarkModeActive);
});

// Fonction pour d√©tecter la touche "Entr√©e" dans le champ de message et envoyer le message
document.getElementById('message').addEventListener('keypress', function(event) {
    if (event.key === 'Enter' && !event.shiftKey) {  // V√©rifie que Enter est press√© sans Shift
        event.preventDefault();  // Emp√™che l'ajout d'un saut de ligne
        sendMessage();  // Appelle la fonction pour envoyer le message
    }
});

// Fonction pour rendre les liens cliquables
function makeLinksClickable(text) {
    const urlRegex = /(https?:\/\/[^\s]+)/g; // D√©tecte les URLs commen√ßant par http ou https
    return text.replace(urlRegex, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');
}
